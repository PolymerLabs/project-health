import anyTest, {TestInterface} from 'ava';

import {startTestReplayServer} from '../../../replay-server';
import {fetchIncomingData} from '../../../server/apis/dash-data';
import {IncomingDashResponse, PullRequest} from '../../../types/api';
import {PullRequestReviewState} from '../../../types/gql-types';
import {initGithub} from '../../../utils/github';

type TestContext = {
  data: IncomingDashResponse,
  prsById: Map<string, PullRequest>,
};
const test = anyTest as TestInterface<TestContext>;

/**
 * Generates the test context object before each test.
 */
test.beforeEach(async (t) => {
  const {server, url} =
      await startTestReplayServer(t, 'project-health1-dashboard incoming');
  initGithub(url, url);

  const data = await fetchIncomingData(
      'project-health1', process.env.GITHUB_TOKEN || '');
  server.close();

  const prsById = new Map();
  for (const pr of data.prs) {
    prsById.set(
        pr.url.replace('https://github.com/project-health1/repo/pull/', ''),
        pr);
  }
  t.context = {
    data,
    prsById,
  };
});

test('dashincoming: sane output', (t) => {
  const data = t.context.data;
  // Make sure a test is added each time these numbers are changed.
  t.is(data.prs.length, 5);
});

test('dashincoming: incoming PRs are ordered', (t) => {
  const prs = t.context.data.prs;

  // Actionable status items appear before non actionable ones.
  const notActionable = [
    'UnknownStatus',
    'NoActionRequired',
    'NewActivity',
    'StatusChecksPending'
  ];

  // Find first non-actionable.
  let index = 0;
  while (index < prs.length &&
         !notActionable.includes(prs[index].status.type)) {
    index++;
  }

  const firstNonActionableIndex = index;

  // Make sure the rest are not actionable.
  while (index < prs.length) {
    t.true(
        notActionable.includes(prs[index].status.type),
        `Found actionable item after a non-actionable item. Actionable item: ${
            prs[index].status.type}`);
    index++;
  }

  function getLatestEventTime(pr: PullRequest) {
    let latest = pr.createdAt;
    for (const event of pr.events) {
      switch (event.type) {
        case 'NewCommitsEvent':
          if (event.lastPushedAt > latest) {
            latest = event.lastPushedAt;
          }
          break;
        case 'MentionedEvent':
          if (event.mentionedAt > latest) {
            latest = event.mentionedAt;
          }
          break;
        case 'MyReviewEvent':
          // Ignore my review events. Shouldn't impact ordering since it's an
          // event generated by you.
          break;
        default:
          break;
      }
    }
    return latest;
  }

  // Ensure actionable items are sorted.
  let latest = getLatestEventTime(prs[0]);
  for (let i = 1; i < firstNonActionableIndex; i++) {
    const newTime = getLatestEventTime(prs[i]);
    t.true(
        newTime <= latest, 'Actionable PRs not sorted by latest event times');
    latest = newTime;
  }

  // Ensure non-actionable items are sorted.
  latest = getLatestEventTime(prs[firstNonActionableIndex]);
  for (let i = firstNonActionableIndex + 1; i < prs.length; i++) {
    const newTime = getLatestEventTime(prs[i]);
    t.true(
        newTime <= latest,
        'Non-actionable PRs not sorted by latest event times');
    latest = newTime;
  }
});

test('dashincoming: Incoming PR with old @mention before I reviewed', (t) => {
  t.deepEqual(t.context.prsById.get('11'), {
    author: 'project-health2',
    avatarUrl: 'https://avatars3.githubusercontent.com/u/34584974?v=4',
    createdAt: 1518042329000,
    events: [
      {
        review: {
          author: 'project-health1',
          createdAt: 1518042373000,
          reviewState: PullRequestReviewState.COMMENTED,
        },
        type: 'MyReviewEvent',
      },
    ],
    repository: 'project-health1/repo',
    status: {
      type: 'ApprovalRequired',
    },
    title: 'A new pull request',
    url: 'https://github.com/project-health1/repo/pull/11',
  });
});

test('dashincoming: Incoming PR with new @mention after I reviewed', (t) => {
  t.deepEqual(t.context.prsById.get('10'), {
    author: 'project-health2',
    avatarUrl: 'https://avatars3.githubusercontent.com/u/34584974?v=4',
    createdAt: 1518031465000,
    events: [
      {
        review: {
          author: 'project-health1',
          createdAt: 1518031560000,
          reviewState: PullRequestReviewState.APPROVED,
        },
        type: 'MyReviewEvent',
      },
      {
        type: 'MentionedEvent',
        text: '@project-health1 what do you mean?',
        mentionedAt: 1518031578000,
        url:
            'https://github.com/project-health1/repo/pull/10#discussion_r166728166',
      }
    ],
    repository: 'project-health1/repo',
    status: {
      type: 'NoActionRequired',
    },
    title: 'Questionable changes',
    url: 'https://github.com/project-health1/repo/pull/10',
  });
});

test('dashincoming: Incoming PR that I reviewed. New commit since', (t) => {
  t.deepEqual(t.context.prsById.get('9'), {
    author: 'project-health2',
    avatarUrl: 'https://avatars3.githubusercontent.com/u/34584974?v=4',
    createdAt: 1517426339000,
    events: [
      {
        review: {
          author: 'project-health1',
          createdAt: 1517426369000,
          reviewState: PullRequestReviewState.CHANGES_REQUESTED,
        },
        type: 'MyReviewEvent',
      },
      {
        type: 'NewCommitsEvent',
        count: 1,
        additions: 1,
        deletions: 1,
        changedFiles: 1,
        lastPushedAt: 1517426401000,
        url:
            'https://github.com/project-health1/repo/pull/9/files/4eb760bbbeb1e9b5ee51010050fca4d1f2fe5dbb..bf67264ad3d77fcd9ad43cfcc13c8578fb9f57de',
      }
    ],
    repository: 'project-health1/repo',
    status: {
      type: 'ApprovalRequired',
    },
    title: 'Update links in readme',
    url: 'https://github.com/project-health1/repo/pull/9',
  });
});

test('dashincoming: Incoming PR, I requested changes', (t) => {
  t.deepEqual(t.context.prsById.get('3'), {
    author: 'project-health2',
    avatarUrl: 'https://avatars3.githubusercontent.com/u/34584974?v=4',
    createdAt: 1516750523000,
    repository: 'project-health1/repo',
    title: 'A couple minor changes for browserify compatibility',
    url: 'https://github.com/project-health1/repo/pull/3',
    status: {type: 'ApprovalRequired'},
    events: [{
      type: 'MyReviewEvent',
      review: {
        author: 'project-health1',
        createdAt: 1516753105000,
        reviewState: PullRequestReviewState.CHANGES_REQUESTED,
      }
    }],
  });
});

test('dashincoming: Incoming review request', (t) => {
  t.deepEqual(t.context.prsById.get('4'), {
    author: 'project-health2',
    avatarUrl: 'https://avatars3.githubusercontent.com/u/34584974?v=4',
    createdAt: 1516753159000,
    repository: 'project-health1/repo',
    title: 'Add a field for getting the template of an element',
    url: 'https://github.com/project-health1/repo/pull/4',
    status: {type: 'ReviewRequired'},
    events: [],
  });
});
